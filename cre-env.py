def log(msg):
    with open('log.txt', 'a') as f:
        f.write(f'{msg}\\n')import tkinter as tk from tkinter import messagebox, simpledialog import os import sys import subprocess import logging  logging.basicConfig(level=logging.DEBUG)   class App(tk.Tk):     def __init__(self):         super().__init__()         self.title("Gestion des paquets Python")         self.geometry("400x400")                  self.create_env_button = tk.Button(self, text="Créer un environnement virtuel", command=self.create_env)         self.create_env_button.pack(pady=10)          self.update_packages_button = tk.Button(self, text="Mettre à jour les paquets", command=self.update_packages)         self.update_packages_button.pack(pady=10)          self.check_conflicts_button = tk.Button(self, text="Vérifier les conflits de paquets", command=self.check_conflicts)         self.check_conflicts_button.pack(pady=10)          self.upgrade_python_button = tk.Button(self, text="Mettre à jour Python", command=self.upgrade_python)         self.upgrade_python_button.pack(pady=10)          self.delete_env_button = tk.Button(self, text="Supprimer l'environnement virtuel", command=self.delete_env)         self.delete_env_button.pack(pady=10)      def create_env(self):         env_name = tk.simpledialog.askstring(title="Créer un environnement virtuel", prompt="Entrez le nom de l'environnement virtuel :")         if env_name:             subprocess.run([sys.executable, "-m", "venv", env_name])             messagebox.showinfo(title="Environnement virtuel créé", message=f"L'environnement virtuel '{env_name}' a été créé avec succès.")      def update_packages(self):         env_name = tk.simpledialog.askstring(title="Mettre à jour les paquets", prompt="Entrez le nom de l'environnement virtuel :")         if env_name:             subprocess.run([env_name + "\\Scripts\\activate.bat", "&", "python", "-m", "pip", "install", "--upgrade", "pip", "setuptools", "wheel"])             subprocess.run([env_name + "\\Scripts\\activate.bat", "&", "python", "-m", "pip", "install", "-r", "requirements.txt"])             messagebox.showinfo(title="Mise à jour des paquets", message="Les paquets ont été mis à jour avec succès.")       def check_conflicts(self):         env_name = tk.simpledialog.askstring(title="Vérifier les conflits de paquets", prompt="Entrez le nom de l'environnement virtuel :")         if env_name:             subprocess.run([env_name + "\\Scripts\\activate.bat", "&", "python", "-m", "pip", "check"])      def upgrade_python(self):         if messagebox.askyesno(title="Mise à jour de Python", message="Êtes-vous sûr de vouloir mettre à jour Python ?"):             subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip", "setuptools", "wheel"])             subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "python"])             messagebox.showinfo(title="Mise à jour de Python", message="Python a été mis à jour avec succès. Veuillez redémarrer l'application.")      def delete_env(self):         env_name = tk.simpledialog.askstring(title="Supprimer un environnement virtuel", prompt="Entrez le nom de l'environnement virtuel :")         if env_name:             if os.path.exists(env_name):                 if sys.platform == "win32":                     subprocess.run([env_name + "\\Scripts\\deactivate.bat"], shell=True)                 else:                     subprocess.run(["deactivate"], shell=True)                 subprocess.run(["rm", "-rf", env_name], shell=True)                 messagebox.showinfo(title="Environnement virtuel supprimé", message=f"L'environnement virtuel '{env_name}' a été supprimé avec succès.")             else:                 messagebox.showwarning(title="Environnement virtuel non trouvé", message=f"L'environnement virtuel '{env_name}' n'a pas été trouvé.")      if __name__ == "__main__":     app = App()     app.mainloop()
